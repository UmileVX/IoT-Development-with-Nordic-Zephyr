// To get started, press Ctrl+Space to bring up the completion menu and view the available nodes.

// You can also use the buttons in the sidebar to perform actions on nodes.
// Actions currently available include:

// * Enabling / disabling the node
// * Adding the bus to a bus
// * Removing the node
// * Connecting ADC channels

// For more help, browse the DeviceTree documentation at https://docs.zephyrproject.org/latest/guides/dts/index.html
// You can also visit the nRF DeviceTree extension documentation at https://nrfconnect.github.io/vscode-nrf-connect/devicetree/nrfdevicetree.html
#include <zephyr/dt-bindings/display/ili9xxx.h>

/ {
   chosen {
          zephyr,display = &ili9488_smartdream_display;
          zephyr,keyboard-scan = &sd_kscan;
   };

   aliases {
        backlight = &backlight;
        vbben = &vbben;
        psw = &pwbutton;
        tprst = &tprst;
        // tpint = &tpint;
   };

   lcd_module {
        compatible = "gpio-leds";
    
        backlight: back_light {
            gpios = <&gpio1 7 GPIO_ACTIVE_HIGH>;
        };

        vbben: vbb_en {
            gpios = <&gpio1 9 (GPIO_PULL_UP | GPIO_ACTIVE_HIGH)>;
        };

        tprst: tp_rst {
            gpios = <&gpio1 4 (GPIO_PULL_UP | GPIO_ACTIVE_HIGH)>;
        };

        // tpint: tp_int {
        //     gpios = <&gpio1 2 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
        // };
    };

     sd_key {
         compatible = "gpio-keys";
         pwbutton: pw_button{
             gpios = <&gpio0 26 (GPIO_ACTIVE_HIGH)>;
             label = "Push button for power";
         };
     };
};

&arduino_spi {
      status = "okay";
      cs-gpios = <&gpio0 9 GPIO_ACTIVE_LOW>; 

      ili9488_smartdream_display: ili9488@0 {
              compatible = "ilitek,ili9488";
              spi-max-frequency = <25000000>;
              reg = <0>;
              cmd-data-gpios = <&gpio1 5 GPIO_ACTIVE_LOW>; 
              reset-gpios = <&gpio1 6 GPIO_ACTIVE_LOW>; 
              pixel-format = <ILI9XXX_PIXEL_FORMAT_RGB888>;
              width = <320>;
              height = <480>;
              rotation = <0>;
              frmctr1 = [a0 11];
              pwctrl1 = [17 15];
              pwctrl2 = [41];
              pgamctrl = [00 03 09 08 16 0a 3f 78 4c 09 0a 08 16 1a 0f];
              ngamctrl = [00 16 19 03 0f 05 32 45 46 04 0e 0d 35 37 0f];
      };
};

&i2c0 {
        /* PCA9546_ID 0x41 */
    gpio_expander@41 {
        compatible = "ti,pca9536";
        reg = <0x41>;
    };

        /*  FT6X36_ID 0x36 */
	sd_kscan:ft5336@38 {
		compatible = "focaltech,ft5336";
		reg = <0x38>;
		int-gpios = <&gpio1 2 (GPIO_PULL_UP |GPIO_ACTIVE_LOW)>;
	};
};

&pinctrl {
    spi3_default: spi3_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 17)>,
                <NRF_PSEL(SPIM_MISO, 0, 13)>,
                <NRF_PSEL(SPIM_MOSI, 0, 15)>;
        };
    };

    spi3_sleep: spi3_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 17)>,
                <NRF_PSEL(SPIM_MISO, 0, 13)>,
                <NRF_PSEL(SPIM_MOSI, 0, 15)>;
            low-power-enable;
        };
    };

    i2c0_default: i2c0_default {
		group1 {
			psels = <NRF_PSEL(TWIM_SDA, 0, 6)>,
				<NRF_PSEL(TWIM_SCL, 0, 8)>;
		};
	};

	i2c0_sleep: i2c0_sleep {
		group1 {
			psels = <NRF_PSEL(TWIM_SDA, 0, 6)>,
				<NRF_PSEL(TWIM_SCL, 0, 8)>;
			low-power-enable;
		};
	};
};

&spi1 {
    status = "disabled";
};

&uart0 {
    status = "disabled";
};

&uart1 {
    status = "disabled";
};

&pwm0 {
    status = "disabled";
};

&qspi {
    status = "disabled";    
};

&led0 {
    status = "disabled";     
};

&led1 {
    status = "disabled";     
};

&led2 {
    status = "disabled";     
};

&led3 {
    status = "disabled";     
};

&button0 {
    status = "disabled";     
};

&button1 {
    status = "disabled";     
};

&button2 {
    status = "disabled";     
};

&button3 {
    status = "disabled";     
};

// &i2c0 {
//     status = "disabled";
// };

&pwm_led0 {
    status = "disabled";
};

